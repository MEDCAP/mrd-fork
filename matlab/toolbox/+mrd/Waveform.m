% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef Waveform < handle
  properties
    flags
    measurement_uid
    scan_counter
<<<<<<< HEAD
    time_stamp_ns
    sample_time_ns
=======
    % EDIT: Starting timestamp of this waveform, nanoseconds since midnight
    time_stamp_ns
    % EDIT: Time between samples in nanoseconds
    sample_time_ns
    % ID matching the waveform in the MRD header
>>>>>>> 34594f0a430fc035361e38f998636583f38fc1fe
    waveform_id
    data
  end

  methods
    function self = Waveform(kwargs)
      arguments
        kwargs.flags = uint64(0);
        kwargs.measurement_uid = uint32(0);
        kwargs.scan_counter = uint32(0);
        kwargs.time_stamp_ns = uint64(0);
        kwargs.sample_time_ns = uint64(0);
        kwargs.waveform_id = uint32(0);
        kwargs.data;
      end
      self.flags = kwargs.flags;
      self.measurement_uid = kwargs.measurement_uid;
      self.scan_counter = kwargs.scan_counter;
      self.time_stamp_ns = kwargs.time_stamp_ns;
      self.sample_time_ns = kwargs.sample_time_ns;
      self.waveform_id = kwargs.waveform_id;
      if ~isfield(kwargs, "data")
        throw(yardl.TypeError("Missing required keyword argument 'data'"))
      end
      self.data = kwargs.data;
    end

    function res = channels(self)
      res = size(self.data, ndims(self.data)-(0));
      return
    end

    function res = number_of_samples(self)
      res = size(self.data, ndims(self.data)-(1));
      return
    end

    function res = time_stamp(self)
      res = uint32(self.time_stamp_ns ./ 1000);
      return
    end

    function res = sample_time_us(self)
      res = single(self.sample_time_ns ./ 1000);
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "mrd.Waveform") && ...
<<<<<<< HEAD
        isequal({self.flags}, {other.flags}) && ...
        isequal({self.measurement_uid}, {other.measurement_uid}) && ...
        isequal({self.scan_counter}, {other.scan_counter}) && ...
        isequal({self.time_stamp_ns}, {other.time_stamp_ns}) && ...
        isequal({self.sample_time_ns}, {other.sample_time_ns}) && ...
        isequal({self.waveform_id}, {other.waveform_id}) && ...
        isequal({self.data}, {other.data});
=======
        isequal(self.flags, other.flags) && ...
        isequal(self.measurement_uid, other.measurement_uid) && ...
        isequal(self.scan_counter, other.scan_counter) && ...
        isequal(self.time_stamp_ns, other.time_stamp_ns) && ...
        isequal(self.sample_time_ns, other.sample_time_ns) && ...
        isequal(self.waveform_id, other.waveform_id) && ...
        isequal(self.data, other.data);
>>>>>>> 34594f0a430fc035361e38f998636583f38fc1fe
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.Waveform(data=yardl.None);
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
