% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef ImageHeader < handle
  properties
    flags
    measurement_uid
    measurement_freq
    field_of_view
    position
    col_dir
    line_dir
    slice_dir
    patient_table_position
    average
    slice
    contrast
    phase
    repetition
    set
    acquisition_time_stamp_ns
    physiology_time_stamp_ns
    image_type
    image_quantitative_type
    image_index
    image_series_index
    user_int
    user_float
  end

  methods
    function self = ImageHeader(kwargs)
      arguments
        kwargs.flags = mrd.ImageFlags(0);
        kwargs.measurement_uid = uint32(0);
        kwargs.measurement_freq = uint32(0);
        kwargs.field_of_view = repelem(single(0), 3, 1);
        kwargs.position = repelem(single(0), 3, 1);
        kwargs.col_dir = repelem(single(0), 3, 1);
        kwargs.line_dir = repelem(single(0), 3, 1);
        kwargs.slice_dir = repelem(single(0), 3, 1);
        kwargs.patient_table_position = repelem(single(0), 3, 1);
        kwargs.average = yardl.None;
        kwargs.slice = yardl.None;
        kwargs.contrast = yardl.None;
        kwargs.phase = yardl.None;
        kwargs.repetition = yardl.None;
        kwargs.set = yardl.None;
        kwargs.acquisition_time_stamp_ns = uint64(0);
        kwargs.physiology_time_stamp_ns = uint64(0);
        kwargs.image_type;
        kwargs.image_quantitative_type = yardl.None;
        kwargs.image_index = yardl.None;
        kwargs.image_series_index = yardl.None;
        kwargs.user_int = int32.empty();
        kwargs.user_float = single.empty();
      end
      self.flags = kwargs.flags;
      self.measurement_uid = kwargs.measurement_uid;
      self.measurement_freq = kwargs.measurement_freq;
      self.field_of_view = kwargs.field_of_view;
      self.position = kwargs.position;
      self.col_dir = kwargs.col_dir;
      self.line_dir = kwargs.line_dir;
      self.slice_dir = kwargs.slice_dir;
      self.patient_table_position = kwargs.patient_table_position;
      self.average = kwargs.average;
      self.slice = kwargs.slice;
      self.contrast = kwargs.contrast;
      self.phase = kwargs.phase;
      self.repetition = kwargs.repetition;
      self.set = kwargs.set;
      self.acquisition_time_stamp_ns = kwargs.acquisition_time_stamp_ns;
      self.physiology_time_stamp_ns = kwargs.physiology_time_stamp_ns;
      if ~isfield(kwargs, "image_type")
        throw(yardl.TypeError("Missing required keyword argument 'image_type'"))
      end
      self.image_type = kwargs.image_type;
      self.image_quantitative_type = kwargs.image_quantitative_type;
      self.image_index = kwargs.image_index;
      self.image_series_index = kwargs.image_series_index;
      self.user_int = kwargs.user_int;
      self.user_float = kwargs.user_float;
    end

    function res = acquisition_time_stamp(self)
      res = uint32(double(self.acquisition_time_stamp_ns) ./ 1e6);
      return
    end

    function res = physiology_time_stamp(self)
      res = double(self.physiology_time_stamp_ns) ./ 1e6;
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "mrd.ImageHeader") && ...
        isequal({self.flags}, {other.flags}) && ...
        isequal({self.measurement_uid}, {other.measurement_uid}) && ...
        isequal({self.measurement_freq}, {other.measurement_freq}) && ...
        isequal({self.field_of_view}, {other.field_of_view}) && ...
        isequal({self.position}, {other.position}) && ...
        isequal({self.col_dir}, {other.col_dir}) && ...
        isequal({self.line_dir}, {other.line_dir}) && ...
        isequal({self.slice_dir}, {other.slice_dir}) && ...
        isequal({self.patient_table_position}, {other.patient_table_position}) && ...
        isequal({self.average}, {other.average}) && ...
        isequal({self.slice}, {other.slice}) && ...
        isequal({self.contrast}, {other.contrast}) && ...
        isequal({self.phase}, {other.phase}) && ...
        isequal({self.repetition}, {other.repetition}) && ...
        isequal({self.set}, {other.set}) && ...
        isequal({self.acquisition_time_stamp_ns}, {other.acquisition_time_stamp_ns}) && ...
        isequal({self.physiology_time_stamp_ns}, {other.physiology_time_stamp_ns}) && ...
        isequal({self.image_type}, {other.image_type}) && ...
        isequal({self.image_quantitative_type}, {other.image_quantitative_type}) && ...
        isequal({self.image_index}, {other.image_index}) && ...
        isequal({self.image_series_index}, {other.image_series_index}) && ...
        isequal({self.user_int}, {other.user_int}) && ...
        isequal({self.user_float}, {other.user_float});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.ImageHeader(image_type=yardl.None);
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
