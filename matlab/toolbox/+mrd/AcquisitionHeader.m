% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef AcquisitionHeader < handle
  properties
    flags
    idx
    measurement_uid
    scan_counter
    acquisition_time_stamp_ns
    physiology_time_stamp_ns
    channel_order
    discard_pre
    discard_post
    center_sample
    encoding_space_ref
    sample_time_ns
    position
    read_dir
    phase_dir
    slice_dir
    patient_table_position
    user_int
    user_float
  end

  methods
    function self = AcquisitionHeader(kwargs)
      arguments
        kwargs.flags = mrd.AcquisitionFlags(0);
        kwargs.idx = mrd.EncodingCounters();
        kwargs.measurement_uid = uint32(0);
        kwargs.scan_counter = yardl.None;
        kwargs.acquisition_time_stamp_ns = uint64(0);
        kwargs.physiology_time_stamp_ns = uint64(0);
        kwargs.channel_order = uint32.empty();
        kwargs.discard_pre = yardl.None;
        kwargs.discard_post = yardl.None;
        kwargs.center_sample = yardl.None;
        kwargs.encoding_space_ref = yardl.None;
        kwargs.sample_time_ns = uint64(0);
        kwargs.position = repelem(single(0), 3, 1);
        kwargs.read_dir = repelem(single(0), 3, 1);
        kwargs.phase_dir = repelem(single(0), 3, 1);
        kwargs.slice_dir = repelem(single(0), 3, 1);
        kwargs.patient_table_position = repelem(single(0), 3, 1);
        kwargs.user_int = int32.empty();
        kwargs.user_float = single.empty();
      end
      self.flags = kwargs.flags;
      self.idx = kwargs.idx;
      self.measurement_uid = kwargs.measurement_uid;
      self.scan_counter = kwargs.scan_counter;
      self.acquisition_time_stamp_ns = kwargs.acquisition_time_stamp_ns;
      self.physiology_time_stamp_ns = kwargs.physiology_time_stamp_ns;
      self.channel_order = kwargs.channel_order;
      self.discard_pre = kwargs.discard_pre;
      self.discard_post = kwargs.discard_post;
      self.center_sample = kwargs.center_sample;
      self.encoding_space_ref = kwargs.encoding_space_ref;
      self.sample_time_ns = kwargs.sample_time_ns;
      self.position = kwargs.position;
      self.read_dir = kwargs.read_dir;
      self.phase_dir = kwargs.phase_dir;
      self.slice_dir = kwargs.slice_dir;
      self.patient_table_position = kwargs.patient_table_position;
      self.user_int = kwargs.user_int;
      self.user_float = kwargs.user_float;
    end

    function res = acquisition_time_stamp(self)
      res = uint32(double(self.acquisition_time_stamp_ns) ./ 1e6);
      return
    end

    function res = physiology_time_stamp(self)
      res = uint32(double(self.physiology_time_stamp_ns) ./ 1e6);
      return
    end

    function res = sample_time(self)
      res = single(double(self.sample_time_ns) ./ 1e6);
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "mrd.AcquisitionHeader") && ...
        isequal({self.flags}, {other.flags}) && ...
        isequal({self.idx}, {other.idx}) && ...
        isequal({self.measurement_uid}, {other.measurement_uid}) && ...
        isequal({self.scan_counter}, {other.scan_counter}) && ...
        isequal({self.acquisition_time_stamp_ns}, {other.acquisition_time_stamp_ns}) && ...
        isequal({self.physiology_time_stamp_ns}, {other.physiology_time_stamp_ns}) && ...
        isequal({self.channel_order}, {other.channel_order}) && ...
        isequal({self.discard_pre}, {other.discard_pre}) && ...
        isequal({self.discard_post}, {other.discard_post}) && ...
        isequal({self.center_sample}, {other.center_sample}) && ...
        isequal({self.encoding_space_ref}, {other.encoding_space_ref}) && ...
        isequal({self.sample_time_ns}, {other.sample_time_ns}) && ...
        isequal({self.position}, {other.position}) && ...
        isequal({self.read_dir}, {other.read_dir}) && ...
        isequal({self.phase_dir}, {other.phase_dir}) && ...
        isequal({self.slice_dir}, {other.slice_dir}) && ...
        isequal({self.patient_table_position}, {other.patient_table_position}) && ...
        isequal({self.user_int}, {other.user_int}) && ...
        isequal({self.user_float}, {other.user_float});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.AcquisitionHeader();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
