% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef Gradient < handle
  properties
    % Grad header
    head
    % gradient directions
    rl
    ap
    fh
  end

  methods
    function self = Gradient(kwargs)
      arguments
        kwargs.head = mrd.GradHeader();
        kwargs.rl = single.empty(0);
        kwargs.ap = single.empty(0);
        kwargs.fh = single.empty(0);
      end
      self.head = kwargs.head;
      self.rl = kwargs.rl;
      self.ap = kwargs.ap;
      self.fh = kwargs.fh;
    end

    function res = samples(self)
      % EDIT: Assuming writer sets rl,ap,fh gradients, all have the same size. Computed fields are in ns
      res = size(self.rl, ndims(self.rl)-(0));
      return
    end

    function res = starttime(self)
      res = self.head.gradient_time_stamp_ns;
      return
    end

    function res = endtime(self)
      res = self.head.gradient_time_stamp_ns + self.samples() .* uint64(self.head.gradient_sample_time_ns);
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "mrd.Gradient") && ...
        isequal(self.head, other.head) && ...
        isequal(self.rl, other.rl) && ...
        isequal(self.ap, other.ap) && ...
        isequal(self.fh, other.fh);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.Gradient();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
