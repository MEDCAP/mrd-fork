% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef GradHeader < handle
  properties
    % Clock time stamp, nanoseconds since midnight
    gradient_time_stamp_ns
    % Gradient sample duration in nanoseconds
    gradient_sample_time_ns
    % Grad calibration (T/m/A). Can be here or as a calGradMap calibration image or neither
    pulse_calibration
  end

  methods
    function self = GradHeader(kwargs)
      arguments
        kwargs.gradient_time_stamp_ns = uint64(0);
        kwargs.gradient_sample_time_ns = uint32(0);
        kwargs.pulse_calibration = yardl.None;
      end
      self.gradient_time_stamp_ns = kwargs.gradient_time_stamp_ns;
      self.gradient_sample_time_ns = kwargs.gradient_sample_time_ns;
      self.pulse_calibration = kwargs.pulse_calibration;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.GradHeader") && ...
        isequal(self.gradient_time_stamp_ns, other.gradient_time_stamp_ns) && ...
        isequal(self.gradient_sample_time_ns, other.gradient_sample_time_ns) && ...
        isequal(self.pulse_calibration, other.pulse_calibration);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.GradHeader();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
