% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef Acquisition < handle
  properties
<<<<<<< HEAD
    head
=======
    % Acquisition header
    head
    % Raw k-space samples array
>>>>>>> 34594f0a430fc035361e38f998636583f38fc1fe
    data
  end

  methods
    function self = Acquisition(kwargs)
      arguments
        kwargs.head = mrd.AcquisitionHeader();
<<<<<<< HEAD
        kwargs.data = single.empty();
=======
        kwargs.data = single.empty(0, 0);
        kwargs.trajectory = single.empty(0, 0);
>>>>>>> 34594f0a430fc035361e38f998636583f38fc1fe
      end
      self.head = kwargs.head;
      self.data = kwargs.data;
    end

    function res = coils(self)
      res = size(self.data, ndims(self.data)-(0));
      return
    end

    function res = samples(self)
      res = size(self.data, ndims(self.data)-(1));
      return
    end

    function res = active_channels(self)
      res = length(self.head.channel_order);
<<<<<<< HEAD
=======
      return
    end

    function res = trajectory_dimensions(self)
      res = size(self.trajectory, ndims(self.trajectory)-(0));
      return
    end

    function res = trajectory_samples(self)
      res = size(self.trajectory, ndims(self.trajectory)-(1));
>>>>>>> 34594f0a430fc035361e38f998636583f38fc1fe
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "mrd.Acquisition") && ...
<<<<<<< HEAD
        isequal({self.head}, {other.head}) && ...
        isequal({self.data}, {other.data});
=======
        isequal(self.head, other.head) && ...
        isequal(self.data, other.data) && ...
        isequal(self.trajectory, other.trajectory);
>>>>>>> 34594f0a430fc035361e38f998636583f38fc1fe
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.Acquisition();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
