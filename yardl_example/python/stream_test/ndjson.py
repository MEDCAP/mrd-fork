# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false
# pyright: reportUnusedImport=false
# pyright: reportUnknownArgumentType=false
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownVariableType=false

import collections.abc
import io
import typing

import numpy as np
import numpy.typing as npt

from .types import *

from .protocols import *
from . import _ndjson
from . import yardl_types as yardl

class HeaderConverter(_ndjson.JsonConverter[Header, np.void]):
    def __init__(self) -> None:
        self._subject_converter = _ndjson.string_converter
        super().__init__(np.dtype([
            ("subject", self._subject_converter.overall_dtype()),
        ]))

    def to_json(self, value: Header) -> object:
        if not isinstance(value, Header): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'Header' instance")
        json_object = {}

        json_object["subject"] = self._subject_converter.to_json(value.subject)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["subject"] = self._subject_converter.numpy_to_json(value["subject"])
        return json_object

    def from_json(self, json_object: object) -> Header:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return Header(
            subject=self._subject_converter.from_json(json_object["subject"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._subject_converter.from_json_to_numpy(json_object["subject"]),
        ) # type:ignore 


class SampleConverter(_ndjson.JsonConverter[Sample, np.void]):
    def __init__(self) -> None:
        self._data_converter = _ndjson.VectorConverter(_ndjson.int32_converter)
        self._optional_data_converter = _ndjson.OptionalConverter(_ndjson.VectorConverter(_ndjson.int32_converter))
        super().__init__(np.dtype([
            ("data", self._data_converter.overall_dtype()),
            ("optional_data", self._optional_data_converter.overall_dtype()),
        ]))

    def to_json(self, value: Sample) -> object:
        if not isinstance(value, Sample): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'Sample' instance")
        json_object = {}

        json_object["data"] = self._data_converter.to_json(value.data)
        if value.optional_data is not None:
            json_object["optionalData"] = self._optional_data_converter.to_json(value.optional_data)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["data"] = self._data_converter.numpy_to_json(value["data"])
        if (field_val := value["optional_data"]) is not None:
            json_object["optionalData"] = self._optional_data_converter.numpy_to_json(field_val)
        return json_object

    def from_json(self, json_object: object) -> Sample:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return Sample(
            data=self._data_converter.from_json(json_object["data"],),
            optional_data=self._optional_data_converter.from_json(json_object.get("optionalData")),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._data_converter.from_json_to_numpy(json_object["data"]),
            self._optional_data_converter.from_json_to_numpy(json_object.get("optionalData")),
        ) # type:ignore 


class PointConverter(_ndjson.JsonConverter[Point, np.void]):
    def __init__(self) -> None:
        self._x_converter = _ndjson.uint64_converter
        self._y_converter = _ndjson.int32_converter
        super().__init__(np.dtype([
            ("x", self._x_converter.overall_dtype()),
            ("y", self._y_converter.overall_dtype()),
        ]))

    def to_json(self, value: Point) -> object:
        if not isinstance(value, Point): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'Point' instance")
        json_object = {}

        json_object["x"] = self._x_converter.to_json(value.x)
        json_object["y"] = self._y_converter.to_json(value.y)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["x"] = self._x_converter.numpy_to_json(value["x"])
        json_object["y"] = self._y_converter.numpy_to_json(value["y"])
        return json_object

    def from_json(self, json_object: object) -> Point:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return Point(
            x=self._x_converter.from_json(json_object["x"],),
            y=self._y_converter.from_json(json_object["y"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._x_converter.from_json_to_numpy(json_object["x"]),
            self._y_converter.from_json_to_numpy(json_object["y"]),
        ) # type:ignore 


fruits_name_to_value_map = {
    "apple": Fruits.APPLE,
    "banana": Fruits.BANANA,
    "pear": Fruits.PEAR,
}
fruits_value_to_name_map = {v: n for n, v in fruits_name_to_value_map.items()}

class NDJsonMyProtocolWriter(_ndjson.NDJsonProtocolWriter, MyProtocolWriterBase):
    """NDJson writer for the MyProtocol protocol.

    This is an example protocol, which is defined as a Header value
    followed by a stream of zero or more Sample values
    """


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        MyProtocolWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, MyProtocolWriterBase.schema)

    def _write_header(self, value: Header) -> None:
        converter = HeaderConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"header": json_value})

    def _write_float_array(self, value: npt.NDArray[np.float32]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (2, 2,))
        json_value = converter.to_json(value)
        self._write_json_line({"floatArray": json_value})

    def _write_samples(self, value: collections.abc.Iterable[Sample]) -> None:
        converter = SampleConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"samples": json_item})

    def _write_points(self, value: collections.abc.Iterable[Point]) -> None:
        converter = PointConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"points": json_item})


class NDJsonMyProtocolReader(_ndjson.NDJsonProtocolReader, MyProtocolReaderBase):
    """NDJson writer for the MyProtocol protocol.

    This is an example protocol, which is defined as a Header value
    followed by a stream of zero or more Sample values
    """


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        MyProtocolReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, MyProtocolReaderBase.schema)

    def _read_header(self) -> Header:
        json_object = self._read_json_line("header", True)
        converter = HeaderConverter()
        return converter.from_json(json_object)

    def _read_float_array(self) -> npt.NDArray[np.float32]:
        json_object = self._read_json_line("floatArray", True)
        converter = _ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (2, 2,))
        return converter.from_json(json_object)

    def _read_samples(self) -> collections.abc.Iterable[Sample]:
        converter = SampleConverter()
        while (json_object := self._read_json_line("samples", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_points(self) -> collections.abc.Iterable[Point]:
        converter = PointConverter()
        while (json_object := self._read_json_line("points", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

