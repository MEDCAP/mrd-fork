# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false
# pyright: reportUnusedImport=false
# pyright: reportUnknownArgumentType=false
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownVariableType=false

import collections.abc
import io
import typing

import numpy as np
import numpy.typing as npt

from .types import *

from .protocols import *
from . import _binary
from . import yardl_types as yardl

class BinaryMyProtocolWriter(_binary.BinaryProtocolWriter, MyProtocolWriterBase):
    """Binary writer for the MyProtocol protocol.

    This is an example protocol, which is defined as a Header value
    followed by a stream of zero or more Sample values
    """


    def __init__(self, stream: typing.Union[typing.BinaryIO, str]) -> None:
        MyProtocolWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, MyProtocolWriterBase.schema)

    def _write_header(self, value: Header) -> None:
        HeaderSerializer().write(self._stream, value)

    def _write_float_array(self, value: npt.NDArray[np.float32]) -> None:
        _binary.FixedNDArraySerializer(_binary.float32_serializer, (2, 2,)).write(self._stream, value)

    def _write_samples(self, value: collections.abc.Iterable[Sample]) -> None:
        _binary.StreamSerializer(SampleSerializer()).write(self._stream, value)

    def _write_points(self, value: collections.abc.Iterable[Point]) -> None:
        _binary.StreamSerializer(PointSerializer()).write(self._stream, value)


class BinaryMyProtocolReader(_binary.BinaryProtocolReader, MyProtocolReaderBase):
    """Binary writer for the MyProtocol protocol.

    This is an example protocol, which is defined as a Header value
    followed by a stream of zero or more Sample values
    """


    def __init__(self, stream: typing.Union[io.BufferedReader, io.BytesIO, typing.BinaryIO, str]) -> None:
        MyProtocolReaderBase.__init__(self)
        _binary.BinaryProtocolReader.__init__(self, stream, MyProtocolReaderBase.schema)

    def _read_header(self) -> Header:
        return HeaderSerializer().read(self._stream)

    def _read_float_array(self) -> npt.NDArray[np.float32]:
        return _binary.FixedNDArraySerializer(_binary.float32_serializer, (2, 2,)).read(self._stream)

    def _read_samples(self) -> collections.abc.Iterable[Sample]:
        return _binary.StreamSerializer(SampleSerializer()).read(self._stream)

    def _read_points(self) -> collections.abc.Iterable[Point]:
        return _binary.StreamSerializer(PointSerializer()).read(self._stream)

class HeaderSerializer(_binary.RecordSerializer[Header]):
    def __init__(self) -> None:
        super().__init__([("subject", _binary.string_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: Header) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.subject)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['subject'])

    def read(self, stream: _binary.CodedInputStream) -> Header:
        field_values = self._read(stream)
        return Header(subject=field_values[0])


class SampleSerializer(_binary.RecordSerializer[Sample]):
    def __init__(self) -> None:
        super().__init__([("data", _binary.VectorSerializer(_binary.int32_serializer)), ("optional_data", _binary.OptionalSerializer(_binary.VectorSerializer(_binary.int32_serializer)))])

    def write(self, stream: _binary.CodedOutputStream, value: Sample) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.data, value.optional_data)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['data'], value['optional_data'])

    def read(self, stream: _binary.CodedInputStream) -> Sample:
        field_values = self._read(stream)
        return Sample(data=field_values[0], optional_data=field_values[1])


class PointSerializer(_binary.RecordSerializer[Point]):
    def __init__(self) -> None:
        super().__init__([("x", _binary.uint64_serializer), ("y", _binary.int32_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: Point) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.x, value.y)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['x'], value['y'])

    def read(self, stream: _binary.CodedInputStream) -> Point:
        field_values = self._read(stream)
        return Point(x=field_values[0], y=field_values[1])


