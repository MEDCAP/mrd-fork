# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedImport=false

import abc
import collections.abc
import datetime
import typing

import numpy as np
import numpy.typing as npt

from .types import *
from .yardl_types import ProtocolError
from . import yardl_types as yardl

class MyProtocolWriterBase(abc.ABC):
    """Abstract writer for the MyProtocol protocol.

    This is an example protocol, which is defined as a Header value
    followed by a stream of zero or more Sample values
    """


    def __init__(self) -> None:
        self._state = 0

    schema = r"""{"protocol":{"name":"MyProtocol","sequence":[{"name":"header","type":"StreamTest.Header"},{"name":"floatArray","type":{"array":{"items":"float32","dimensions":[{"length":2},{"length":2}]}}},{"name":"samples","type":{"stream":{"items":"StreamTest.Sample"}}},{"name":"points","type":{"stream":{"items":"StreamTest.Point"}}}]},"types":[{"name":"Header","fields":[{"name":"subject","type":"string"}]},{"name":"Point","fields":[{"name":"x","type":"uint64"},{"name":"y","type":"int32"}]},{"name":"Sample","fields":[{"name":"data","type":{"vector":{"items":"int32"}}},{"name":"optionalData","type":[null,{"vector":{"items":"int32"}}]}]}]}"""

    def close(self) -> None:
        if self._state == 7:
            try:
                self._end_stream()
                return
            finally:
                self._close()
        self._close()
        if self._state != 8:
            expected_method = self._state_to_method_name((self._state + 1) & ~1)
            raise ProtocolError(f"Protocol writer closed before all steps were called. Expected to call to '{expected_method}'.")

    def __enter__(self):
        return self

    def __exit__(self, exc_type: typing.Optional[type[BaseException]], exc: typing.Optional[BaseException], traceback: object) -> None:
        try:
            self.close()
        except Exception as e:
            if exc is None:
                raise e

    def write_header(self, value: Header) -> None:
        """Ordinal 0"""

        if self._state != 0:
            self._raise_unexpected_state(0)

        self._write_header(value)
        self._state = 2

    def write_float_array(self, value: npt.NDArray[np.float32]) -> None:
        """Ordinal 1"""

        if self._state != 2:
            self._raise_unexpected_state(2)

        self._write_float_array(value)
        self._state = 4

    def write_samples(self, value: collections.abc.Iterable[Sample]) -> None:
        """Ordinal 2"""

        if self._state & ~1 != 4:
            self._raise_unexpected_state(4)

        self._write_samples(value)
        self._state = 5

    def write_points(self, value: collections.abc.Iterable[Point]) -> None:
        """Ordinal 3"""

        if self._state == 5:
            self._end_stream()
            self._state = 6
        elif self._state & ~1 != 6:
            self._raise_unexpected_state(6)

        self._write_points(value)
        self._state = 7

    @abc.abstractmethod
    def _write_header(self, value: Header) -> None:
        raise NotImplementedError()

    @abc.abstractmethod
    def _write_float_array(self, value: npt.NDArray[np.float32]) -> None:
        raise NotImplementedError()

    @abc.abstractmethod
    def _write_samples(self, value: collections.abc.Iterable[Sample]) -> None:
        raise NotImplementedError()

    @abc.abstractmethod
    def _write_points(self, value: collections.abc.Iterable[Point]) -> None:
        raise NotImplementedError()

    @abc.abstractmethod
    def _close(self) -> None:
        pass

    @abc.abstractmethod
    def _end_stream(self) -> None:
        pass

    def _raise_unexpected_state(self, actual: int) -> None:
        expected_method = self._state_to_method_name(self._state)
        actual_method = self._state_to_method_name(actual)
        raise ProtocolError(f"Expected to call to '{expected_method}' but received call to '{actual_method}'.")

    def _state_to_method_name(self, state: int) -> str:
        if state == 0:
            return 'write_header'
        if state == 2:
            return 'write_float_array'
        if state == 4:
            return 'write_samples'
        if state == 6:
            return 'write_points'
        return "<unknown>"

class MyProtocolReaderBase(abc.ABC):
    """Abstract reader for the MyProtocol protocol.

    This is an example protocol, which is defined as a Header value
    followed by a stream of zero or more Sample values
    """


    def __init__(self) -> None:
        self._state = 0

    def close(self) -> None:
        self._close()
        if self._state != 8:
            if self._state % 2 == 1:
                previous_method = self._state_to_method_name(self._state - 1)
                raise ProtocolError(f"Protocol reader closed before all data was consumed. The iterable returned by '{previous_method}' was not fully consumed.")
            else:
                expected_method = self._state_to_method_name(self._state)
                raise ProtocolError(f"Protocol reader closed before all data was consumed. Expected call to '{expected_method}'.")
            	

    schema = MyProtocolWriterBase.schema

    def __enter__(self):
        return self

    def __exit__(self, exc_type: typing.Optional[type[BaseException]], exc: typing.Optional[BaseException], traceback: object) -> None:
        try:
            self.close()
        except Exception as e:
            if exc is None:
                raise e

    @abc.abstractmethod
    def _close(self) -> None:
        raise NotImplementedError()

    def read_header(self) -> Header:
        """Ordinal 0"""

        if self._state != 0:
            self._raise_unexpected_state(0)

        value = self._read_header()
        self._state = 2
        return value

    def read_float_array(self) -> npt.NDArray[np.float32]:
        """Ordinal 1"""

        if self._state != 2:
            self._raise_unexpected_state(2)

        value = self._read_float_array()
        self._state = 4
        return value

    def read_samples(self) -> collections.abc.Iterable[Sample]:
        """Ordinal 2"""

        if self._state != 4:
            self._raise_unexpected_state(4)

        value = self._read_samples()
        self._state = 5
        return self._wrap_iterable(value, 6)

    def read_points(self) -> collections.abc.Iterable[Point]:
        """Ordinal 3"""

        if self._state != 6:
            self._raise_unexpected_state(6)

        value = self._read_points()
        self._state = 7
        return self._wrap_iterable(value, 8)

    def copy_to(self, writer: MyProtocolWriterBase) -> None:
        writer.write_header(self.read_header())
        writer.write_float_array(self.read_float_array())
        writer.write_samples(self.read_samples())
        writer.write_points(self.read_points())

    @abc.abstractmethod
    def _read_header(self) -> Header:
        raise NotImplementedError()

    @abc.abstractmethod
    def _read_float_array(self) -> npt.NDArray[np.float32]:
        raise NotImplementedError()

    @abc.abstractmethod
    def _read_samples(self) -> collections.abc.Iterable[Sample]:
        raise NotImplementedError()

    @abc.abstractmethod
    def _read_points(self) -> collections.abc.Iterable[Point]:
        raise NotImplementedError()

    T = typing.TypeVar('T')
    def _wrap_iterable(self, iterable: collections.abc.Iterable[T], final_state: int) -> collections.abc.Iterable[T]:
        yield from iterable
        self._state = final_state

    def _raise_unexpected_state(self, actual: int) -> None:
        actual_method = self._state_to_method_name(actual)
        if self._state % 2 == 1:
            previous_method = self._state_to_method_name(self._state - 1)
            raise ProtocolError(f"Received call to '{actual_method}' but the iterable returned by '{previous_method}' was not fully consumed.")
        else:
            expected_method = self._state_to_method_name(self._state)
            raise ProtocolError(f"Expected to call to '{expected_method}' but received call to '{actual_method}'.")
        	
    def _state_to_method_name(self, state: int) -> str:
        if state == 0:
            return 'read_header'
        if state == 2:
            return 'read_float_array'
        if state == 4:
            return 'read_samples'
        if state == 6:
            return 'read_points'
        return "<unknown>"

